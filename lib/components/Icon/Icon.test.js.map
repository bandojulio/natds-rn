{"version":3,"sources":["Icon.test.js"],"names":["describe","it","keys","Object","iconNames","filter","key","forEach","wrapper","renderer","create","expect","toJSON","toMatchSnapshot","entries","sizes","value"],"mappings":"8rBAAA,4B;AACA,sD;AACA,+E;AACA;AACA,yC;;;AAGAA,SAAS,gBAAT,CAA2B,UAAM;AAC/BC,GAAG,sDAAH,CAA2D,UAAM;;AAE/D,GAAMC,MAAOC,OAAOD,IAAP,CAAYE,oBAAZ,EAAuBC,MAAvB,CAA8B,oBAAOC,IAAP,EAA9B,CAAb;;AAEAJ,KAAKK,OAAL,CAAa,SAACD,GAAD,CAAS;AACpB,GAAME,SAAUC,4BAASC,MAAT,CAAgB,8BAAC,UAAD,EAAM,KAAMJ,GAAZ,iDAAhB,CAAhB;;AAEAK,OAAOH,QAAQI,MAAR,EAAP,EAAyBC,eAAzB,2BAAmEP,GAAnE;AACD,CAJD;AAKD,CATD;;AAWAL,GAAG,wEAAH,CAA6E,UAAM;AACjF,GAAMO,SAAUC,4BAASC,MAAT,CAAgB,8BAAC,UAAD,EAAM,KAAK,WAAX,iDAAhB,CAAhB;;AAEAC,OAAOH,QAAQI,MAAR,EAAP,EAAyBC,eAAzB,CAAyC,6CAAzC;AACD,CAJD;;AAMAZ,GAAG,sDAAH,CAA2D,UAAM;AAC/DE,OAAOW,OAAP,CAAeC,YAAf,EAAsBR,OAAtB,CAA8B,cAAkB,kCAAhBD,GAAgB,UAAXU,KAAW;AAC9C,GAAMR,SAAUC,4BAASC,MAAT,CAAgB,8BAAC,UAAD,EAAM,KAAMM,KAAZ,iDAAhB,CAAhB;;AAEAL,OAAOH,QAAQI,MAAR,EAAP,EAAyBC,eAAzB,0BAAkEP,GAAlE,aAAiFU,KAAjF;AACD,CAJD;AAKD,CAND;AAOD,CAzBD","file":"Icon.test.js","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport iconNames from '@naturacosmeticos/natds-icons/dist/natds-icons.json';\nimport { Icon } from './Icon';\nimport { sizes } from '../../tokens/sizes';\n\n\ndescribe('Icon component', () => {\n  it('should render Icon component with all possible icons', () => {\n    // Filters undefined keys\n    const keys = Object.keys(iconNames).filter(key => key);\n\n    keys.forEach((key) => {\n      const wrapper = renderer.create(<Icon name={key}/>);\n\n      expect(wrapper.toJSON()).toMatchSnapshot(`Icon component - name: ${key}`);\n    });\n  });\n\n  it('should render filled-brand-naturarosacea icon when wrong name is given', () => {\n    const wrapper = renderer.create(<Icon name=\"MOCK-NAME\"/>);\n\n    expect(wrapper.toJSON()).toMatchSnapshot('Icon component - filled-brand-naturarosacea');\n  });\n\n  it('should render Icon component with all possible sizes', () => {\n    Object.entries(sizes).forEach(([key, value]) => {\n      const wrapper = renderer.create(<Icon name={value}/>);\n\n      expect(wrapper.toJSON()).toMatchSnapshot(`Icon component - key: ${key} | size: ${value}`);\n    });\n  });\n});\n"]}