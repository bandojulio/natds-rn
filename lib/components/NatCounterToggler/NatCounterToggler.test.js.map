{"version":3,"sources":["NatCounterToggler.test.js"],"names":["describe","afterEach","jest","clearAllMocks","it","CounterToggler","renderer","create","toJSON","expect","toMatchSnapshot","onDecreaseEvent","fn","wrapper","getElement","props","children","onPress","mock","calls","length","toBe","onIncreaseEvent","counter","onIncrease","i","disabled","onDecrease","update"],"mappings":"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","file":"NatCounterToggler.test.js","sourcesContent":["/* eslint-disable no-multi-assign */\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport { shallow } from 'enzyme';\nimport 'jest-styled-components';\nimport { NatCounterToggler } from './NatCounterToggler';\n\ndescribe('NatCounterToggler', () => {\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('Should render the component correctly', () => {\n    const CounterToggler = renderer.create(\n      <NatCounterToggler />,\n    ).toJSON();\n\n    expect(CounterToggler).toMatchSnapshot();\n  });\n\n  it('Should simulate the decrease click on the component', () => {\n    const onDecreaseEvent = jest.fn();\n    const wrapper = shallow(<NatCounterToggler onDecrease={onDecreaseEvent} />);\n\n    wrapper.getElement().props.children[0].props.onPress();\n    expect(onDecreaseEvent.mock.calls.length).toBe(1);\n  });\n\n  it('Should simulate the increase click on the component', () => {\n    const onIncreaseEvent = jest.fn();\n    const wrapper = shallow(<NatCounterToggler onIncrease={onIncreaseEvent} />);\n\n    wrapper.getElement().props.children[2].props.onPress();\n    expect(onIncreaseEvent.mock.calls.length).toBe(1);\n  });\n\n  it('Should limit the counter on the component and deny further increment upon htting the maximum limit', () => {\n    let counter = 1;\n\n    const onIncrease = () => {\n      counter = counter += 1;\n    };\n\n    const wrapper = shallow(<NatCounterToggler\n      counter={counter}\n      min={1}\n      max={2}\n      onIncrease={onIncrease}\n    />);\n\n    for (let i = 0; i < 3; i += 1) {\n      // add button\n      wrapper.getElement().props.children[2].props.onPress();\n    }\n\n    // add button\n    expect(wrapper.getElement().props.children[2].props.disabled).toBe(true);\n  });\n\n\n  it('Should limit the counter on the component and deny further decrement upon htting the minimum limit', () => {\n    let counter = 2;\n\n    const onDecrease = () => {\n      counter = counter -= 1;\n      // eslint-disable-next-line no-use-before-define\n      wrapper.update();\n    };\n\n    const onIncrease = () => {\n      counter = counter += 1;\n      // eslint-disable-next-line no-use-before-define\n      wrapper.update();\n    };\n\n    const wrapper = shallow(<NatCounterToggler\n      counter={counter}\n      min={1}\n      max={4}\n      onDecrease={onDecrease}\n      onIncrease={onIncrease}\n    />);\n\n    for (let i = 0; i < 3; i += 1) {\n      // add button\n      wrapper.getElement().props.children[2].props.onPress();\n    }\n\n    for (let i = 0; i < 11; i += 1) {\n      // decrease button\n      wrapper.getElement().props.children[0].props.onPress();\n    }\n\n    // decrease button\n    expect(wrapper.getElement().props.children[0].props.disabled).toBe(true);\n  });\n});\n"]}