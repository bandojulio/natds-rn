{"version":3,"sources":["NatModalSelect.js"],"names":["NatModalSelect","action","buttonText","multiSelect","onClose","options","placeholderText","save","title","value","visible","inputSelected","setInputSelected","inputFilter","setInputFilter","selectButton","optionsList","filter","item","includes","map","dividerBottom","hideIconLeft","id","flex","height","text","svg","name","propTypes","PropTypes","func","isRequired","string","bool","arrayOf","shape","defaultProps"],"mappings":"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","file":"NatModalSelect.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Modal,\n  SafeAreaView,\n  View,\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport {\n  ModalContent,\n} from './NatModalSelect.styles';\n\nimport { NatList } from '../NatList';\nimport { NatAppBarSearch } from '../NatAppBarSearch';\nimport { Button } from '../Button';\n\nexport const NatModalSelect = ({\n  action,\n  buttonText,\n  multiSelect,\n  onClose,\n  options,\n  placeholderText,\n  save,\n  title,\n  value,\n  visible,\n}) => {\n  const [inputSelected, setInputSelected] = useState(value);\n  const [inputFilter, setInputFilter] = useState([]);\n\n  const selectButton = () => {\n    onClose(inputSelected);\n  };\n\n  const optionsList = () => options\n    .filter((item) => {\n      if (inputFilter === '') return true;\n\n      return item.title.includes(inputFilter);\n    })\n    .map(item => ({\n      dividerBottom: true,\n      hideIconLeft: true,\n      id: item.id,\n      title: item.title,\n    }));\n\n  return (\n    <Modal\n      animationType=\"fade\"\n      onRequestClose={action}\n      save={save}\n      visible={visible}\n    >\n      <SafeAreaView style={{ flex: 1 }}>\n        <ModalContent accessibilityLabel={title}>\n          <View style={{ height: 59 }}>\n            <NatAppBarSearch\n              title={placeholderText}\n              value={inputFilter}\n              onSubmit={text => setInputFilter(text)}\n              showIconLeft={true}\n              onPressLeft={() => onClose(inputSelected)}\n              iconLeft={{ svg: { name: 'outlined-naviagtion-directionright' } }}\n              submitOnChange\n            />\n          </View>\n          <View style={{ flex: 1 }}>\n            <NatList\n              items={optionsList()}\n              selected={inputSelected}\n              onChange={setInputSelected}\n              multiSelect={multiSelect}\n            />\n          </View>\n          <View style={{ height: 48 }}>\n            <Button\n              type=\"primary\"\n              fixedBottom\n              label={buttonText}\n              onPress={selectButton}\n            />\n          </View>\n        </ModalContent>\n      </SafeAreaView>\n    </Modal>\n  );\n};\n\nNatModalSelect.propTypes = {\n  action: PropTypes.func.isRequired,\n  buttonText: PropTypes.string,\n  multiSelect: PropTypes.bool,\n  onClose: PropTypes.func,\n  options: PropTypes.arrayOf(PropTypes.shape(\n    {\n      id: PropTypes.string,\n      title: PropTypes.string,\n    },\n  )),\n  placeholderText: PropTypes.string,\n  save: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n  value: PropTypes.arrayOf(PropTypes.string),\n  visible: PropTypes.bool,\n};\n\nNatModalSelect.defaultProps = {\n  buttonText: 'Select',\n  multiSelect: false,\n  onClose: () => {},\n  options: [],\n  placeholderText: 'Search',\n  save: false,\n  value: [],\n  visible: false,\n};\n"]}