{"version":3,"sources":["NatPeriodButton.js"],"names":["NatPeriodButton","selected","title","subtitle","onSelect","iconSrc","Error","Platform","OS","uri","propTypes","PropTypes","string","isRequired","func","bool","defaultProps"],"mappings":"gKAAA,4B;AACA;AACA,qC;;AAEA,yD;;;;AAIO,GAAMA,yCAAkB,QAAlBA,gBAAkB;;AAEzB,IADJC,SACI,MADJA,QACI,CADMC,KACN,MADMA,KACN,CADaC,QACb,MADaA,QACb,CADuBC,QACvB,MADuBA,QACvB,CADiCC,OACjC,MADiCA,OACjC;AACJ,GAAI,CAACD,QAAL,CAAe;AACb,KAAM,IAAIE,MAAJ,CAAU,yEAAV,CAAN;AACD;;AAED,MAAQC,uBAASC,EAAT,GAAgB,SAAhB;AACN,8BAAC,oCAAD,EAAyB,QAASJ,QAAlC;AACE,8BAAC,2BAAD,EAAY,SAAUH,QAAtB;AACGA;AACD,8BAAC,4BAAD;AACE,OAAQ,CAAEQ,IAAKJ,OAAP,CADV,iDAFF;;;;AAOGH;AACD,8BAAC,sBAAD,EAAO,SAAUD,QAAjB,iDAA4BC,KAA5B,CARF;;AAUGC;AACD,8BAAC,yBAAD,EAAU,SAAUF,QAApB,iDAA+BE,QAA/B,CAXF,CADF,CADM;;;;;AAkBN,8BAAC,uCAAD,EAAwB,QAASC,QAAjC;AACE,8BAAC,2BAAD,EAAY,SAAUH,QAAtB;AACGA;AACD,8BAAC,4BAAD;AACE,OAAQ,CAAEQ,IAAKJ,OAAP,CADV,iDAFF;;;;AAOGH;AACD,8BAAC,sBAAD,EAAO,SAAUD,QAAjB,iDAA4BC,KAA5B,CARF;;AAUGC;AACD,8BAAC,yBAAD,EAAU,SAAUF,QAApB,iDAA+BE,QAA/B,CAXF,CADF,CAlBF;;;;;AAmCD,CA1CM;;AA4CPH,gBAAgBU,SAAhB,CAA4B;AAC1BL,QAASM,oBAAUC,MAAV,CAAiBC,UADA;AAE1BT,SAAUO,oBAAUG,IAAV,CAAeD,UAFC;AAG1BZ,SAAUU,oBAAUI,IAHM;AAI1BZ,SAAUQ,oBAAUC,MAJM;AAK1BV,MAAOS,oBAAUC,MALS,CAA5B;;AAOAZ,gBAAgBgB,YAAhB,CAA+B;AAC7Bf,SAAU,KADmB;AAE7BE,SAAU,IAFmB;AAG7BD,MAAO,IAHsB,CAA/B","file":"NatPeriodButton.js","sourcesContent":["import React from 'react';\nimport { Platform, TouchableNativeFeedback } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport {\n  CustomView, Title, SubTitle, CheckedIcon, CustomTouchableOpacity,\n} from './NatPeriodButton.styles';\n\nexport const NatPeriodButton = ({\n  selected, title, subtitle, onSelect, iconSrc,\n}) => {\n  if (!onSelect) {\n    throw new Error('Period Button needs an onSelect property to be passed to the component.');\n  }\n\n  return (Platform.OS === 'android' ? (\n    <TouchableNativeFeedback onPress={onSelect}>\n      <CustomView selected={selected}>\n        {selected && (\n        <CheckedIcon\n          source={{ uri: iconSrc }}\n          // source temporario\n        />\n        )}\n        {title && (\n        <Title selected={selected}>{title}</Title>\n        )}\n        {subtitle && (\n        <SubTitle selected={selected}>{subtitle}</SubTitle>\n        )}\n      </CustomView>\n    </TouchableNativeFeedback>\n  ) : (\n    <CustomTouchableOpacity onPress={onSelect}>\n      <CustomView selected={selected}>\n        {selected && (\n        <CheckedIcon\n          source={{ uri: iconSrc }}\n          // source temporario\n        />\n        )}\n        {title && (\n        <Title selected={selected}>{title}</Title>\n        )}\n        {subtitle && (\n        <SubTitle selected={selected}>{subtitle}</SubTitle>\n        )}\n      </CustomView>\n    </CustomTouchableOpacity>\n  ));\n};\n\nNatPeriodButton.propTypes = {\n  iconSrc: PropTypes.string.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  selected: PropTypes.bool,\n  subtitle: PropTypes.string,\n  title: PropTypes.string,\n};\nNatPeriodButton.defaultProps = {\n  selected: false,\n  subtitle: null,\n  title: null,\n};\n"]}