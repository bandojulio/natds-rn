{"version":3,"sources":["NatTextInput.styles.js"],"names":["getInputStyles","type","state","theme","configStyle","color","palette","error","main","borderColor","border","text","disabled","secondary","primary","background","defaultContrastText","getPaddingSize","multiline","size","finalSize","Wrapper","styled","View","marginDefault","sizes","InputWrapper","defaultSize","backgroundColor","TextInput","numberOfLines","fontColor","secureTextEntry","Label","spacing","spacingNone","AssistiveTexView","IconPress","TouchableOpacity","propTypes","PropTypes","string","isRequired","shape"],"mappings":"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","file":"NatTextInput.styles.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components/native';\nimport { NatText } from '../NatText';\nimport { sizes } from '../../tokens/sizes';\n\nconst getInputStyles = (type, state, theme) => {\n  const configStyle = {};\n\n  switch (type) {\n    case 'error':\n      configStyle.color = theme.palette.error.main;\n      configStyle.borderColor = theme.palette.error.main;\n      configStyle.border = '2px';\n      break;\n    case 'disabled':\n      configStyle.color = theme.palette.text.disabled;\n      configStyle.borderColor = theme.palette.text.disabled;\n      // configStyle.backgroundColor = theme.palette.text.disabled;\n      break;\n    case 'none':\n      configStyle.color = theme.palette.text.disabled;\n      configStyle.borderColor = theme.palette.text.disabled;\n      configStyle.border = '0px';\n      // configStyle.backgroundColor = theme.palette.text.disabled;\n      break;\n    default:\n      configStyle.color = theme.palette.text.secondary;\n      configStyle.borderColor = theme.palette.text.disabled;\n\n      if (state === 'active') {\n        configStyle.border = '2px';\n        configStyle.borderColor = theme.palette.primary.main;\n      }\n      if (state === 'filled') {\n        // configStyle.border = '2px';\n        configStyle.borderColor = theme.palette.background.defaultContrastText;\n      }\n\n      break;\n  }\n\n  return configStyle;\n};\n\nconst getPaddingSize = (multiline, size) => {\n  let finalSize = ((multiline > 1) ? '16px' : '16px');\n\n  if (size === 'small') {\n    finalSize = ((multiline > 1) ? '8px' : '8px');\n  }\n\n  return finalSize;\n};\n\nexport const Wrapper = styled.View`\n  width: 100%;\n  margin-bottom: ${({ marginDefault }) => sizes[marginDefault]}px;\n`;\n\nexport const InputWrapper = styled.View`\n  border: ${({ type, state, theme }) => getInputStyles(type, state, theme).border || '1px'};\n  border-color: ${({ type, state, theme }) => getInputStyles(type, state, theme).borderColor};\n  border-radius: 4px;\n  height: ${({ defaultSize }) => defaultSize || '56px'};\n  padding-left: 16px;\n  padding-bottom: 0px;\n  flex-direction: row;\n  justify-content: space-between;\n  background-color: ${({ type, state, theme }) => getInputStyles(type, state, theme).backgroundColor || 'transparent'};\n`;\n\nexport const TextInput = styled.TextInput`\n  font-size: 16px;\n  flex: 7;\n  align-self: center;\n  padding-top: ${({ numberOfLines, size }) => getPaddingSize(numberOfLines, size)};\n  padding-bottom: ${({ numberOfLines, size }) => getPaddingSize(numberOfLines, size)};\n  text-align-vertical: top;\n  height: ${({ defaultSize }) => defaultSize || '56px'};\n  color: ${({ type, state, theme }) => getInputStyles(type, state, theme).fontColor || theme.palette.text.secondary};\n  letter-spacing: ${({ secureTextEntry }) => (secureTextEntry ? '0px' : '0px')};\n`;\n\nexport const Label = ({\n  type,\n  state,\n  theme,\n  text,\n}) => {\n  const { color } = getInputStyles(type, state, theme);\n\n  return <NatText value={text} type=\"body2\" color={color} margin={theme.spacing.spacingNone} />;\n};\n\nexport const AssistiveTexView = ({\n  type,\n  state,\n  theme,\n  text,\n}) => {\n  const { color } = getInputStyles(type, state, theme);\n\n  return <NatText value={text} type=\"caption\" color={color} margin={theme.spacing.spacingNone} />;\n};\n\nexport const IconPress = styled.TouchableOpacity`\n  align-self: center;\n  flex: 1;\n`;\n\nAssistiveTexView.propTypes = {\n  state: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  theme: PropTypes.shape().isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nLabel.propTypes = {\n  state: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  theme: PropTypes.shape().isRequired,\n  type: PropTypes.string.isRequired,\n};\n"]}