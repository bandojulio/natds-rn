{"version":3,"sources":["NatTextInput.js"],"names":["NatTextInput","onChangeText","value","type","label","placeholder","secureTextEntry","assistiveText","icon","iconPress","onFocus","onBlur","size","margin","multiline","numberOfLines","accessibilityLabel","accessibilityHint","autoCapitalize","autoCorrect","onSubmitEditing","theme","isFilled","state","setState","handleOnFocus","func","handleOnBlur","currentState","renderIcon","iconData","iconAttributes","color","ThemeNaturaLight","palette","text","primary","defaultSize","propSize","lines","defaultHeight","height","propTypes","PropTypes","string","bool","shape","content","any","svg","name","number","isRequired","defaultProps"],"mappings":"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","file":"NatTextInput.js","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Wrapper, InputWrapper, TextInput, Label, AssistiveTexView, IconPress,\n} from './NatTextInput.styles';\nimport { loadIcon } from '../../utils';\nimport {\n  ThemeNaturaLight,\n} from '../../themes/ThemeNaturaLight';\n\n\nexport const NatTextInput = ({\n  onChangeText,\n  value,\n  type,\n  label,\n  placeholder,\n  secureTextEntry,\n  assistiveText,\n  icon,\n  iconPress,\n  onFocus,\n  onBlur,\n  size,\n  margin,\n  multiline,\n  numberOfLines,\n  accessibilityLabel,\n  accessibilityHint,\n  autoCapitalize,\n  autoCorrect,\n  onSubmitEditing,\n  theme,\n}) => {\n  const isFilled = () => (value ? 'filled' : 'default');\n  const [state, setState] = useState(isFilled());\n\n  const handleOnFocus = (func) => {\n    setState('active');\n    onFocus && onFocus(func);\n  };\n\n  const handleOnBlur = (func) => {\n    const currentState = value ? 'filled' : 'default';\n\n    setState(currentState);\n    onBlur && onBlur(func);\n  };\n\n  const renderIcon = (iconData) => {\n    const iconAttributes = {\n      color: ThemeNaturaLight.palette.text.primary,\n      size: 24,\n    };\n\n    return (\n      <IconPress onPress={iconPress}>\n        { loadIcon(iconData, iconAttributes) }\n      </IconPress>\n    );\n  };\n\n  const defaultSize = (propSize, lines) => {\n    if (lines === 1) {\n      return ((propSize === 'small') ? '40px' : '56px');\n    }\n    if (lines > 1) return `${lines * 40}px`;\n\n    return ((propSize === 'small') ? '40px' : '56px');\n  };\n  const defaultHeight = (propSize, lines) => {\n    if (lines === 1) {\n      return ((propSize === 'small') ? 36 : 52);\n    }\n    if (lines > 1) return lines * 40 - 4;\n\n    return ((propSize === 'small') ? 36 : 52);\n  };\n\n  return (\n    <Wrapper\n      marginDefault={margin}\n      accessible\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      theme={theme}\n    >\n      { label !== '' && <Label type={type} state={state} theme={theme} text={label} /> }\n      <InputWrapper\n        type={type}\n        state={state}\n        defaultSize={defaultSize(size, numberOfLines)}\n        theme={theme}\n      >\n        <TextInput\n          secureTextEntry={secureTextEntry}\n          onChangeText={onChangeText}\n          placeholder={placeholder}\n          onFocus={handleOnFocus}\n          onBlur={handleOnBlur}\n          onSubmitEditing={onSubmitEditing}\n          value={value}\n          multiline={multiline}\n          numberOfLines={numberOfLines}\n          editable={type !== 'disabled'}\n          autoCapitalize={autoCapitalize}\n          autoCorrect={autoCorrect}\n          type={type}\n          size={size}\n          state={state}\n          style={{ height: defaultHeight(size, numberOfLines) }}\n          theme={theme}\n        />\n        { icon && renderIcon(icon) }\n      </InputWrapper>\n      {assistiveText !== '' && <AssistiveTexView type={type} state={state} theme={theme} text={assistiveText} />}\n    </Wrapper>\n  );\n};\n\nNatTextInput.propTypes = {\n  accessibilityHint: PropTypes.string,\n  accessibilityLabel: PropTypes.string,\n  assistiveText: PropTypes.string,\n  autoCapitalize: PropTypes.string,\n  autoCorrect: PropTypes.bool,\n  icon: PropTypes.shape({\n    content: PropTypes.any,\n    svg: PropTypes.shape({\n      name: PropTypes.string,\n      size: PropTypes.number,\n    }),\n  }),\n  iconPress: PropTypes.func,\n  label: PropTypes.string.isRequired,\n  margin: PropTypes.string,\n  multiline: PropTypes.bool,\n  numberOfLines: PropTypes.number,\n  onBlur: PropTypes.func,\n  onChangeText: PropTypes.func.isRequired,\n  onFocus: PropTypes.func,\n  onSubmitEditing: PropTypes.func,\n  placeholder: PropTypes.string,\n  secureTextEntry: PropTypes.bool,\n  size: PropTypes.string,\n  theme: PropTypes.shape({}),\n  type: PropTypes.string,\n  value: PropTypes.string,\n};\n\nNatTextInput.defaultProps = {\n  assistiveText: '',\n  icon: false,\n  iconPress: null,\n  margin: 'tiny',\n  multiline: false,\n  numberOfLines: 1,\n  theme: ThemeNaturaLight,\n  type: 'default',\n  value: '',\n};\n"]}