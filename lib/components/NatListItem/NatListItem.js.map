{"version":3,"sources":["NatListItem.js"],"names":["NatListItem","title","node","iconLeft","iconRight","hideIconLeft","hideIconRight","onPressRight","onPressLeft","onPress","dividerTop","dividerBottom","active","Error","renderIcon","iconData","iconPress","position","iconAttributes","color","ThemeNaturaLight","palette","text","primary","size","styleCustom","right","left","localPress","renderTitle","localTitle","propTypes","PropTypes","bool","shape","func","string","defaultProps"],"mappings":"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","file":"NatListItem.js","sourcesContent":["import React from 'react';\nimport {\n  View,\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport { loadIcon } from '../../utils';\nimport {\n  ThemeNaturaLight,\n} from '../../themes/ThemeNaturaLight';\n\n\nimport {\n  HeaderWrapper,\n  HeaderTitle,\n  IconPress,\n  TouchableOpacity,\n  HeaderTitleView,\n} from './NatListItem.styles';\n\nexport const NatListItem = ({\n  title,\n  node,\n  iconLeft,\n  iconRight,\n  hideIconLeft,\n  hideIconRight,\n  onPressRight,\n  onPressLeft,\n  onPress,\n  dividerTop,\n  dividerBottom,\n  active,\n}) => {\n  if (!title) {\n    throw new Error('Title should not empty string');\n  }\n\n  const renderIcon = (iconData, iconPress, position) => {\n    const iconAttributes = {\n      color: ThemeNaturaLight.palette.text.primary,\n      size: 24,\n    };\n\n    let styleCustom = {};\n\n    if (position === 'right') {\n      styleCustom = { position: 'absolute', right: 0 };\n    } else {\n      styleCustom = { left: 0, position: 'absolute' };\n    }\n\n    return (\n      <View style={styleCustom}>\n        <IconPress onPress={iconPress} position={position}>\n          { loadIcon(iconData, iconAttributes) }\n        </IconPress>\n      </View>\n    );\n  };\n\n  const localPress = () => {\n    if (onPress) {\n      onPress();\n    }\n  };\n\n  const renderTitle = localTitle => (\n    <TouchableOpacity\n      onPress={localPress}\n    >\n      <HeaderTitle\n        accessibilityLabel={`${localTitle}`}\n      >\n        {localTitle}\n      </HeaderTitle>\n    </TouchableOpacity>\n  );\n\n  return (\n    <HeaderWrapper\n      accessible\n      accessibilityRole=\"header\"\n      dividerBottom={dividerBottom}\n      dividerTop={dividerTop}\n      active={active}\n    >\n      { !hideIconLeft && renderIcon(iconLeft, onPressLeft, 'left') }\n      <HeaderTitleView\n        hideIconLeft={hideIconLeft}\n        hideIconRight={hideIconRight}\n      >\n        { node && node}\n        { !node && renderTitle(title)}\n      </HeaderTitleView>\n      { !hideIconRight && renderIcon(iconRight, onPressRight, 'right') }\n    </HeaderWrapper>\n  );\n};\n\nNatListItem.propTypes = {\n  active: PropTypes.bool,\n  dividerBottom: PropTypes.bool,\n  dividerTop: PropTypes.bool,\n  hideIconLeft: PropTypes.bool,\n  hideIconRight: PropTypes.bool,\n  iconLeft: PropTypes.shape(),\n  iconRight: PropTypes.shape(),\n  node: PropTypes.node,\n  onPress: PropTypes.func,\n  onPressLeft: PropTypes.func,\n  onPressRight: PropTypes.func,\n  title: PropTypes.string,\n};\n\nNatListItem.defaultProps = {\n  active: false,\n  dividerBottom: false,\n  dividerTop: false,\n  hideIconLeft: false,\n  hideIconRight: false,\n  iconLeft: null,\n  iconRight: null,\n  node: null,\n  onPress: null,\n  onPressLeft: () => {},\n  onPressRight: () => {},\n  title: null,\n};\n"]}