{"version":3,"sources":["NatModal.js"],"names":["NatModal","title","text","action","buttonText","alternative","buttonTextAlternative","alternativeAction","save","toUpperCase","propTypes","PropTypes","func","isRequired","bool","string","defaultProps"],"mappings":"2IAAA,4B;AACA;AACA,qC;;AAEA,2C;;;;;;;;;;;;AAYO,GAAMA,2BAAW,QAAXA,SAAW;AACtBC,KADsB,MACtBA,KADsB;AAEtBC,IAFsB,MAEtBA,IAFsB;AAGtBC,MAHsB,MAGtBA,MAHsB;AAItBC,UAJsB,MAItBA,UAJsB;AAKtBC,WALsB,MAKtBA,WALsB;AAMtBC,qBANsB,MAMtBA,qBANsB;AAOtBC,iBAPsB,MAOtBA,iBAPsB;AAQtBC,IARsB,MAQtBA,IARsB;;AAUtB,8BAAC,kBAAD;AACE,cAAc,MADhB;AAEE,gBAFF;AAGE,eAAgBL,MAHlB;AAIE,KAAMK,IAJR;;AAME,8BAAC,mBAAD;AACE,8BAAC,sBAAD,EAAc,mBAAoBP,KAAlC;AACE,8BAAC,oBAAD,EAAY,KAAMO,IAAlB,iDAAyBP,KAAzB,CADF;AAEI,CAACO,IAAD,EAAU,8BAAC,mBAAD,kDAAYN,IAAZ,CAFd;;AAIMG;;AAEI,8BAAC,wBAAD;AACE,8BAAC,gCAAD;AACE,YAAaA,WADf;AAEE,QAASE,iBAFX;AAGE,mBAAoBD,sBAAsBG,WAAtB,EAHtB;;AAKE,8BAAC,qCAAD;AACE,YAAaJ,WADf;;AAGGC,sBAAsBG,WAAtB,EAHH,CALF,CADF;;;;AAaE,8BAAC,qBAAD;AACE,YAAaJ,WADf;AAEE,QAASF,MAFX;AAGE,mBAAoBC,WAAWK,WAAX,EAHtB;;AAKE,8BAAC,0BAAD,kDAAmBL,WAAWK,WAAX,EAAnB,CALF,CAbF,CAFJ;;;;;AAyBI,8BAAC,qBAAD;AACE,YAAaJ,WADf;AAEE,QAASF,MAFX;AAGE,mBAAoBC,WAAWK,WAAX,EAHtB;;AAKE,8BAAC,0BAAD,kDAAmBL,WAAWK,WAAX,EAAnB,CALF,CA7BV,CADF,CANF,CAVsB,GAAjB;;;;;;;;;AA4DPT,SAASU,SAAT,CAAqB;AACnBP,OAAQQ,oBAAUC,IAAV,CAAeC,UADJ;AAEnBR,YAAaM,oBAAUG,IAFJ;AAGnBP,kBAAmBI,oBAAUC,IAHV;AAInBR,WAAYO,oBAAUI,MAAV,CAAiBF,UAJV;AAKnBP,sBAAuBK,oBAAUI,MALd;AAMnBP,KAAMG,oBAAUG,IANG;AAOnBZ,KAAMS,oBAAUI,MAPG;AAQnBd,MAAOU,oBAAUI,MAAV,CAAiBF,UARL,CAArB;;;AAWAb,SAASgB,YAAT,CAAwB;AACtBX,YAAa,KADS;AAEtBE,kBAAmBI,oBAAUC,IAFP;AAGtBN,sBAAuB,mBAHD;AAItBE,KAAM,KAJgB;AAKtBN,KAAM,kBALgB,CAAxB","file":"NatModal.js","sourcesContent":["import React from 'react';\nimport { Modal } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport {\n  ModalView,\n  ModalContent,\n  ModalText,\n  ModalTitle,\n  ModalButton,\n  ModalButtonLabel,\n  ModalContainer,\n  ModalButtonAlternative,\n  ModalButtonLabelAlternative,\n} from './NatModal.styles';\n\nexport const NatModal = ({\n  title,\n  text,\n  action,\n  buttonText,\n  alternative,\n  buttonTextAlternative,\n  alternativeAction,\n  save,\n}) => (\n  <Modal\n    animationType=\"fade\"\n    transparent\n    onRequestClose={action}\n    save={save}\n  >\n    <ModalView>\n      <ModalContent accessibilityLabel={title}>\n        <ModalTitle save={save}>{title}</ModalTitle>\n        { !save && (<ModalText>{text}</ModalText>) }\n        {\n            alternative\n              ? (\n                <ModalContainer>\n                  <ModalButtonAlternative\n                    alternative={alternative}\n                    onPress={alternativeAction}\n                    accessibilityLabel={buttonTextAlternative.toUpperCase()}\n                  >\n                    <ModalButtonLabelAlternative\n                      alternative={alternative}\n                    >\n                      {buttonTextAlternative.toUpperCase()}\n                    </ModalButtonLabelAlternative>\n                  </ModalButtonAlternative>\n\n                  <ModalButton\n                    alternative={alternative}\n                    onPress={action}\n                    accessibilityLabel={buttonText.toUpperCase()}\n                  >\n                    <ModalButtonLabel>{buttonText.toUpperCase()}</ModalButtonLabel>\n                  </ModalButton>\n                </ModalContainer>\n              )\n              : (\n                <ModalButton\n                  alternative={alternative}\n                  onPress={action}\n                  accessibilityLabel={buttonText.toUpperCase()}\n                >\n                  <ModalButtonLabel>{buttonText.toUpperCase()}</ModalButtonLabel>\n                </ModalButton>\n              )\n          }\n      </ModalContent>\n    </ModalView>\n  </Modal>\n);\n\nNatModal.propTypes = {\n  action: PropTypes.func.isRequired,\n  alternative: PropTypes.bool,\n  alternativeAction: PropTypes.func,\n  buttonText: PropTypes.string.isRequired,\n  buttonTextAlternative: PropTypes.string,\n  save: PropTypes.bool,\n  text: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nNatModal.defaultProps = {\n  alternative: false,\n  alternativeAction: PropTypes.func,\n  buttonTextAlternative: 'Button text error',\n  save: false,\n  text: 'Modal text error',\n};\n"]}