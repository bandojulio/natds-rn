{"version":3,"sources":["NatList.js"],"names":["NatList","items","selected","onChange","multiSelect","showHighlight","currentSelected","setCurrentState","onPress","callback","item","result","includes","id","filter","select","renderItem","title","iconLeft","iconRight","onPressLeft","onPressRight","hideIconLeft","hideIconRight","dividerTop","dividerBottom","map","propTypes","PropTypes","arrayOf","shape","bool","string","isRequired","node","func","defaultProps"],"mappings":"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","file":"NatList.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  ScrollView,\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport {\n  NatListItem,\n} from '../NatListItem';\n\nexport const NatList = ({\n  items,\n  selected,\n  onChange,\n  multiSelect,\n  showHighlight,\n}) => {\n  const [currentSelected, setCurrentState] = useState(selected);\n\n  const onPress = (callback, item) => {\n    let result = currentSelected;\n\n    if (multiSelect) {\n      if (currentSelected.includes(item.id)) {\n        result = currentSelected.filter(select => select !== item.id);\n      } else {\n        result = [...currentSelected, ...[item.id]];\n      }\n    } else if (currentSelected.includes(item.id)) {\n      result = currentSelected.filter(select => select !== item.id);\n    } else {\n      result = [...[item.id]];\n    }\n    setCurrentState(result);\n    if (callback) {\n      callback(result);\n    }\n    if (item.onPress) {\n      item.onPress(item);\n    }\n  };\n\n  const renderItem = item => (\n    <NatListItem\n      title={item.title}\n      iconLeft={item.iconLeft}\n      iconRight={item.iconRight}\n      onPressLeft={item.onPressLeft}\n      onPressRight={item.onPressRight}\n      hideIconLeft={item.hideIconLeft}\n      hideIconRight={item.hideIconRight}\n      onPress={() => onPress(onChange, item)}\n      dividerTop={item.dividerTop}\n      dividerBottom={item.dividerBottom}\n      active={(currentSelected.includes(item.id) && showHighlight)}\n    />\n  );\n\n  return (\n    <ScrollView keyboardShouldPersistTaps=\"always\">\n      { items.map(item => renderItem(item)) }\n    </ScrollView>\n  );\n};\n\nNatList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      dividerBottom: PropTypes.bool,\n      dividerTop: PropTypes.bool,\n      hideIconLeft: PropTypes.bool,\n      hideIconRight: PropTypes.bool,\n      iconLeft: PropTypes.shape(),\n      iconRight: PropTypes.shape(),\n      id: PropTypes.string.isRequired,\n      node: PropTypes.node,\n      onPress: PropTypes.func,\n      onPressLeft: PropTypes.func,\n      onPressRight: PropTypes.func,\n      title: PropTypes.string,\n    }),\n  ).isRequired,\n  multiSelect: PropTypes.bool,\n  onChange: PropTypes.func,\n  selected: PropTypes.arrayOf(\n    PropTypes.string,\n  ),\n  showHighlight: PropTypes.bool,\n};\n\nNatList.defaultProps = {\n  multiSelect: false,\n  onChange: () => {},\n  selected: [],\n  showHighlight: true,\n};\n"]}