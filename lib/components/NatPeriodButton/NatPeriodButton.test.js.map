{"version":3,"sources":["NatPeriodButton.test.js"],"names":["setPlatform","platform","Object","defineProperty","Platform","get","jest","fn","describe","afterEach","clearAllMocks","it","PeriodButton","renderer","create","toJSON","expect","toMatchSnapshot","onSelectEvent","wrapper","find","TouchableNativeFeedback","getElement","props","onPress","mock","calls","length","toBe","CustomTouchableOpacity","CheckedIcon","exists","toBeTruthy","Title","text","toThrow"],"mappings":"0EAAA,4B;AACA,sD;AACA;AACA;AACA;AACA;AACA,0D;;AAEA,GAAMA,aAAc,QAAdA,YAAc,CAACC,QAAD,CAAc;AAChCC,OAAOC,cAAP,CAAsBC,qBAAtB,CAAgC,IAAhC,CAAsC;AACpCC,IAAKC,KAAKC,EAAL,CAAQ,iBAAMN,SAAN,EAAR,CAD+B,CAAtC;;AAGD,CAJD;;AAMAO,SAAS,iBAAT,CAA4B,UAAM;AAChCC,UAAU,UAAM;AACdH,KAAKI,aAAL;AACD,CAFD;;AAIAC,GAAG,uCAAH,CAA4C,UAAM;AAChD,GAAMC,cAAeC,4BAASC,MAAT;AACnB,8BAAC,gCAAD,EAAiB,SAAUR,KAAKC,EAAL,EAA3B,iDADmB;AAEnBQ,MAFmB,EAArB;;AAIAC,OAAOJ,YAAP,EAAqBK,eAArB;AACD,CAND;;AAQAN,GAAG,2EAAH,CAAgF,UAAM;AACpFX,YAAY,SAAZ;AACA,GAAMkB,eAAgBZ,KAAKC,EAAL,EAAtB;AACA,GAAMY,SAAU,oBAAQ,8BAAC,gCAAD,EAAiB,SAAUD,aAA3B,iDAAR,CAAhB;;AAEAC,QAAQC,IAAR,CAAaC,oCAAb,EAAsCC,UAAtC,GAAmDC,KAAnD,CAAyDC,OAAzD;AACAR,OAAOE,cAAcO,IAAd,CAAmBC,KAAnB,CAAyBC,MAAhC,EAAwCC,IAAxC,CAA6C,CAA7C;AACD,CAPD;;AASAjB,GAAG,uEAAH,CAA4E,UAAM;AAChFX,YAAY,KAAZ;AACA,GAAMkB,eAAgBZ,KAAKC,EAAL,EAAtB;AACA,GAAMY,SAAU,oBAAQ,8BAAC,gCAAD,EAAiB,SAAUD,aAA3B,iDAAR,CAAhB;;AAEAC,QAAQC,IAAR,CAAaS,wCAAb,EAAqCP,UAArC,GAAkDC,KAAlD,CAAwDC,OAAxD;AACAR,OAAOE,cAAcO,IAAd,CAAmBC,KAAnB,CAAyBC,MAAhC,EAAwCC,IAAxC,CAA6C,CAA7C;AACD,CAPD;;AASAjB,GAAG,qDAAH,CAA0D,UAAM;AAC9D,GAAMQ,SAAU,oBAAQ,8BAAC,gCAAD,EAAiB,aAAjB,CAA0B,SAAUb,KAAKC,EAAL,EAApC,iDAAR,CAAhB;;AAEAS,OAAOG,QAAQC,IAAR,CAAaU,6BAAb,EAA0BC,MAA1B,EAAP,EAA2CC,UAA3C;AACD,CAJD;;AAMArB,GAAG,2CAAH,CAAgD,UAAM;AACpD,GAAMQ,SAAU;AACd,8BAAC,gCAAD;AACE,MAAM,YADR;AAEE,SAAUb,KAAKC,EAAL,EAFZ,iDADc,CAAhB;;;;AAOAS,OAAOG,QAAQC,IAAR,CAAaa,uBAAb,EAAoBC,IAApB,EAAP,EAAmCN,IAAnC,CAAwC,YAAxC;AACD,CATD;;AAWAjB,GAAG,kFAAH,CAAuF,UAAM;AAC3FK,OAAO,iBAAM;AACX,8BAAC,gCAAD,kDADW,CAAN,EAAP;AAEGmB,OAFH,CAEW,yEAFX;AAGD,CAJD;AAKD,CArDD","file":"NatPeriodButton.test.js","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport { shallow } from 'enzyme';\nimport 'jest-styled-components';\nimport { TouchableNativeFeedback, Platform } from 'react-native';\nimport { NatPeriodButton } from './NatPeriodButton';\nimport { Title, CheckedIcon, CustomTouchableOpacity } from './NatPeriodButton.styles';\n\nconst setPlatform = (platform) => {\n  Object.defineProperty(Platform, 'OS', {\n    get: jest.fn(() => platform),\n  });\n};\n\ndescribe('NatPeriodButton', () => {\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('Should render the component correctly', () => {\n    const PeriodButton = renderer.create(\n      <NatPeriodButton onSelect={jest.fn()} />,\n    ).toJSON();\n\n    expect(PeriodButton).toMatchSnapshot();\n  });\n\n  it('Should simulate the select click on the component on the Android platform', () => {\n    setPlatform('android');\n    const onSelectEvent = jest.fn();\n    const wrapper = shallow(<NatPeriodButton onSelect={onSelectEvent} />);\n\n    wrapper.find(TouchableNativeFeedback).getElement().props.onPress();\n    expect(onSelectEvent.mock.calls.length).toBe(1);\n  });\n\n  it('Should simulate the select click on the component on the iOS platform', () => {\n    setPlatform('ios');\n    const onSelectEvent = jest.fn();\n    const wrapper = shallow(<NatPeriodButton onSelect={onSelectEvent} />);\n\n    wrapper.find(CustomTouchableOpacity).getElement().props.onPress();\n    expect(onSelectEvent.mock.calls.length).toBe(1);\n  });\n\n  it('Should the correct styling properties when selected', () => {\n    const wrapper = shallow(<NatPeriodButton selected onSelect={jest.fn()} />);\n\n    expect(wrapper.find(CheckedIcon).exists()).toBeTruthy();\n  });\n\n  it('Should render header component with title', () => {\n    const wrapper = shallow(\n      <NatPeriodButton\n        title=\"Title test\"\n        onSelect={jest.fn()}\n      />,\n    );\n\n    expect(wrapper.find(Title).text()).toBe('Title test');\n  });\n\n  it('Should throw exception when the onSelect property is not passed to the component', () => {\n    expect(() => shallow(\n      <NatPeriodButton />,\n    )).toThrow('Period Button needs an onSelect property to be passed to the component.');\n  });\n});\n"]}