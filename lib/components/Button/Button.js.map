{"version":3,"sources":["Button.js"],"names":["styles","elevation","shadowColor","shadowOffset","height","width","shadowOpacity","Button","color","iconLeft","iconRight","fixedBottom","label","node","noUpperCase","onPress","onPressLeft","onPressRight","showIconLeft","showIconRight","theme","type","renderIcon","iconData","iconPress","position","iconAttributes","ThemeNaturaLight","palette","text","primary","size","styleCustom","right","left","renderTitle","toUpperCase","background","paper","propTypes","PropTypes","string","bool","shape","func","isRequired","state","defaultProps"],"mappings":"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","file":"Button.js","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport { ButtonWrapper, ButtonText, IconPress } from './Button.styles';\nimport { loadIcon } from '../../utils';\nimport { ThemeNaturaLight } from '../../themes/ThemeNaturaLight';\nimport { NatSpace } from '../NatSpace';\n\nconst styles = {\n  elevation: 1,\n  shadowColor: '#000',\n  shadowOffset: {\n    height: 2,\n    width: 0,\n  },\n  shadowOpacity: 0.24,\n};\n\nexport const Button = ({\n  color,\n  iconLeft,\n  iconRight,\n  fixedBottom,\n  label,\n  node,\n  noUpperCase,\n  onPress,\n  onPressLeft,\n  onPressRight,\n  showIconLeft,\n  showIconRight,\n  theme,\n  type,\n}) => {\n  const renderIcon = (iconData, iconPress, position) => {\n    const iconAttributes = {\n      color: ThemeNaturaLight.palette.text.primary,\n      size: 24,\n    };\n\n    let styleCustom = {};\n\n    if (position === 'right') {\n      styleCustom = { position: 'absolute', right: 0 };\n    } else {\n      styleCustom = { left: 0, position: 'absolute' };\n    }\n\n    return (\n      <View style={styleCustom}>\n        <IconPress onPress={iconPress} position={position}>\n          { loadIcon(iconData, iconAttributes) }\n        </IconPress>\n      </View>\n    );\n  };\n\n  const renderTitle = () => {\n    if (label !== '') {\n      return (\n        <ButtonText\n            type={type}\n            theme={theme}\n            color={color}\n            accessibilityLabel={`${label}`}\n          >\n            {noUpperCase ? label : label.toUpperCase()}\n          </ButtonText>\n      );\n    }\n\n    return node;\n  };\n\n  return (\n    <NatSpace\n      backgroundColor={fixedBottom ? theme.palette.background.paper : 'transparent'}\n      marginBottom=\"none\"\n      marginLeft=\"none\"\n      marginRight=\"none\"\n      marginTop=\"none\"\n      paddingBottom={fixedBottom ? 'tiny' : 'none'}\n      paddingLeft={fixedBottom ? 'small' : 'none'}\n      paddingRight={fixedBottom ? 'small' : 'none'}\n      paddingTop={fixedBottom ? 'small' : 'none'}\n    >\n      <ButtonWrapper\n        accessibilityRole=\"button\"\n        accessible\n        color={color}\n        disabled={color === 'disabled'}\n        onPress={onPress}\n        style={(type === 'primary' && color !== 'disabled') && styles}\n        theme={theme}\n        type={type}\n      >\n        { (showIconLeft && iconLeft !== null) && renderIcon(iconLeft, onPressLeft, 'left') }\n        { renderTitle() }\n        { showIconRight && renderIcon(iconRight, onPressRight, 'right') }\n      </ButtonWrapper>\n    </NatSpace>\n  );\n};\n\nButton.propTypes = {\n  color: PropTypes.string,\n  fixedBottom: PropTypes.bool,\n  iconLeft: PropTypes.shape(),\n  iconRight: PropTypes.shape(),\n  label: PropTypes.string,\n  node: PropTypes.node,\n  noUpperCase: PropTypes.bool,\n  onPress: PropTypes.func.isRequired,\n  onPressLeft: PropTypes.func,\n  onPressRight: PropTypes.func,\n  showIconLeft: PropTypes.bool,\n  showIconRight: PropTypes.bool,\n  state: PropTypes.string,\n  theme: PropTypes.shape(),\n  type: PropTypes.string,\n\n};\n\nButton.defaultProps = {\n  color: 'default',\n  fixedBottom: false,\n  iconLeft: null,\n  iconRight: null,\n  label: '',\n  node: null,\n  noUpperCase: false,\n  onPressLeft: () => {},\n  onPressRight: () => {},\n  showIconLeft: true,\n  showIconRight: true,\n  theme: ThemeNaturaLight,\n  type: 'primary',\n};\n"]}