{"version":3,"sources":["NatButton.test.js"],"names":["describe","it","button","renderer","create","jest","fn","toJSON","expect","toMatchSnapshot","props","beforeEach","label","onPress","type","wrapper","find","ButtonIcon","length","toBe"],"mappings":"8RAAA,4B;AACA,sD;AACA;AACA;;AAEA;AACA;;AAEA,8C;;AAEAA,SAAS,0BAAT,CAAqC,UAAM;AACzCC,GAAG,iCAAH,CAAsC,UAAM;AAC1C,GAAMC,QAASC,4BAASC,MAAT;AACb,8BAAC,oBAAD,EAAW,MAAM,QAAjB,CAA0B,QAASC,KAAKC,EAAL,EAAnC;AACE,8BAAC,iBAAD,uDADF,CADa;;AAIbC,MAJa,EAAf;;AAMAC,OAAON,MAAP,EAAeO,eAAf;AACD,CARD;;AAUAT,SAAS,mBAAT,CAA8B,UAAM;AAClC,GAAIU,OAAQ,EAAZ;;AAEAC,WAAW,UAAM;AACfD,MAAQ;AACNE,MAAO,MADD;AAENC,QAASR,KAAKC,EAAL,EAFH;AAGNQ,KAAM,MAHA,CAAR;;AAKD,CAND;;AAQAb,GAAG,iCAAH,CAAsC,UAAM;AAC1C,GAAMC,QAASC,4BAASC,MAAT,CAAgB,8BAAC,oBAAD,aAAeM,KAAf,mDAAhB,EAA0CH,MAA1C,EAAf;;AAEAC,OAAON,MAAP,EAAeO,eAAf;AACD,CAJD;;AAMAR,GAAG,qBAAH,CAA0B,UAAM;AAC9B,GAAMc,SAAU,oBAAQ,8BAAC,oBAAD,aAAeL,KAAf,mDAAR,CAAhB;;AAEAF,OAAOO,QAAQC,IAAR,CAAaC,sBAAb,EAAyBC,MAAhC,EAAwCC,IAAxC,CAA6C,CAA7C;AACD,CAJD;AAKD,CAtBD;;AAwBAnB,SAAS,oBAAT,CAA+B,UAAM;AACnC,GAAIU,OAAQ,EAAZ;;AAEAC,WAAW,UAAM;AACfD,MAAQ;AACNE,MAAO,MADD;AAENC,QAASR,KAAKC,EAAL,EAFH;AAGNQ,KAAM,OAHA,CAAR;;AAKD,CAND;;AAQAb,GAAG,sCAAH,CAA2C,UAAM;AAC/C,GAAMC,QAASC,4BAASC,MAAT,CAAgB,8BAAC,oBAAD,aAAeM,KAAf,mDAAhB,EAA0CH,MAA1C,EAAf;;AAEAC,OAAON,MAAP,EAAeO,eAAf;AACD,CAJD;;AAMAR,GAAG,yBAAH,CAA8B,UAAM;AAClC,GAAMc,SAAU,oBAAQ,8BAAC,oBAAD,aAAeL,KAAf,mDAAR,CAAhB;;AAEAF,OAAOO,QAAQC,IAAR,CAAaC,sBAAb,EAAyBC,MAAhC,EAAwCC,IAAxC,CAA6C,CAA7C;AACD,CAJD;AAKD,CAtBD;;AAwBAnB,SAAS,sBAAT,CAAiC,UAAM;AACrC,GAAIU,OAAQ,EAAZ;;AAEAC,WAAW,UAAM;AACfD,MAAQ;AACNE,MAAO,MADD;AAENC,QAASR,KAAKC,EAAL,EAFH;AAGNQ,KAAM,SAHA,CAAR;;AAKD,CAND;;AAQAb,GAAG,wCAAH,CAA6C,UAAM;AACjD,GAAMC,QAASC,4BAASC,MAAT,CAAgB,8BAAC,oBAAD,aAAeM,KAAf,mDAAhB,EAA0CH,MAA1C,EAAf;;AAEAC,OAAON,MAAP,EAAeO,eAAf;AACD,CAJD;;AAMAR,GAAG,yBAAH,CAA8B,UAAM;AAClC,GAAMc,SAAU,oBAAQ,8BAAC,oBAAD,aAAeL,KAAf,mDAAR,CAAhB;;AAEAF,OAAOO,QAAQC,IAAR,CAAaC,sBAAb,EAAyBC,MAAhC,EAAwCC,IAAxC,CAA6C,CAA7C;AACD,CAJD;AAKD,CAtBD;AAuBD,CAlFD","file":"NatButton.test.js","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport { shallow } from 'enzyme';\nimport 'jest-styled-components/native';\n\nimport { Text } from 'react-native';\nimport { NatButton } from './NatButton';\n\nimport { ButtonIcon } from './NatButton.styles';\n\ndescribe('Button component default', () => {\n  it('Should render button component ', () => {\n    const button = renderer.create(\n      <NatButton label=\"string\" onPress={jest.fn()}>\n        <Text>Oi</Text>\n      </NatButton>,\n    ).toJSON();\n\n    expect(button).toMatchSnapshot();\n  });\n\n  describe('when is card type', () => {\n    let props = {};\n\n    beforeEach(() => {\n      props = {\n        label: 'test',\n        onPress: jest.fn(),\n        type: 'card',\n      };\n    });\n\n    it('Should render button component ', () => {\n      const button = renderer.create(<NatButton {...props} />).toJSON();\n\n      expect(button).toMatchSnapshot();\n    });\n\n    it('should have an icon', () => {\n      const wrapper = shallow(<NatButton {...props} />);\n\n      expect(wrapper.find(ButtonIcon).length).toBe(1);\n    });\n  });\n\n  describe('when is short type', () => {\n    let props = {};\n\n    beforeEach(() => {\n      props = {\n        label: 'test',\n        onPress: jest.fn(),\n        type: 'short',\n      };\n    });\n\n    it('Should render short button component', () => {\n      const button = renderer.create(<NatButton {...props} />).toJSON();\n\n      expect(button).toMatchSnapshot();\n    });\n\n    it('should not have an icon', () => {\n      const wrapper = shallow(<NatButton {...props} />);\n\n      expect(wrapper.find(ButtonIcon).length).toBe(0);\n    });\n  });\n\n  describe('when is outline type', () => {\n    let props = {};\n\n    beforeEach(() => {\n      props = {\n        label: 'test',\n        onPress: jest.fn(),\n        type: 'outline',\n      };\n    });\n\n    it('Should render outline button component', () => {\n      const button = renderer.create(<NatButton {...props} />).toJSON();\n\n      expect(button).toMatchSnapshot();\n    });\n\n    it('should not have an icon', () => {\n      const wrapper = shallow(<NatButton {...props} />);\n\n      expect(wrapper.find(ButtonIcon).length).toBe(0);\n    });\n  });\n});\n"]}